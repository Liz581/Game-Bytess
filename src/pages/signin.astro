---
import { app } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";
import Layout from "../layouts/Layout.astro";

/* Check if the user is authenticated */
const auth = getAuth(app)
const sessionCookie = Astro.cookies.get('session')?.value
// validate with firebase auth, how to verify cookie
if (sessionCookie) {
    try {
        // Verify session cookie
        const decodedCookie = await auth.verifySessionCookie(sessionCookie)
        // If valid, redirect to dashboard
        if (decodedCookie) return Astro.redirect('/dashboard')
    } catch (error) {
        console.log('Session verification failed:', error)
        // If verification fails, clear the invalid cookie
        Astro.cookies.delete('session', { path: '/' })
    }
}
---

<Layout title="Sign in">
  <div class="container">
    <header>
      <h1>Welcome to Game Bytes!</h1>
      <h2>Sign In</h2>
    </header> 
    <form class="login-form" action="/api/auth/signin" method="post">
      <label for="email" for="email">Email</label>
      <input type="email" name="email" id="email" placeholder="janedoe@gmail.com" required/>
      <label for="password">Password</label>
      <input type="password" name="password" id="password" placeholder="Password" required/>
      <p>New here? <a href="/register">Create an account</a></p>
      <div>
        <p id="msg-for-failure"></p>
      </div>
      <button type="submit">Sign In</button>
    </form>
    <img src="../chefcosmo.png" alt="chef cosmo" />
  </div>
</Layout>
<script>
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
  } from "firebase/auth";
  import { app } from "../firebase/client";

  const auth = getAuth(app);
  // This will prevent the browser from storing session data
  auth.setPersistence(inMemoryPersistence);

  const form = document.querySelector("form") as HTMLFormElement;
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const email = formData.get("email")?.toString();
    const password = formData.get("password")?.toString();

    if (!email || !password) {
      return;
    }
    const userCredential = await signInWithEmailAndPassword(
      auth,
      email,
      password
    );
    const idToken = await userCredential.user.getIdToken();
    const response = await fetch("/api/auth/signin", {
      method: "GET",
      headers: {
        Authorization: `Bearer ${idToken}`,
      },
    });

    if (response.redirected) {
      window.location.assign(response.url);
    }
  });
</script>

<style>
  .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
  }
  body {
      margin: 0;
      padding: 0;
      background: linear-gradient(45deg, #8299ff, #ff90d5);
    }
    header {
      font-family: 'Pixelify Sans', sans-serif;
      padding: 1rem;
      text-align: center;
      font-size: large;
    }
    h1 {
      font-size: 4rem;
      text-shadow: 2px 2px 4px rgba(206, 206, 206, 0.3);
    }
    h2 {
      font-size: 2rem;
      border-bottom: 3px solid #feb47b;
      display: inline-block;
    }

    label {
      font-family: "Nunito Sans", sans-serif;
      font-weight: 400;
      font-style: normal;
    }

  .login-form {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 400px;
      margin: auto;
      background-color: #ffffff;
  }

  .login-form input {
        width: 100%;
        padding: 0.75rem;
        margin-bottom: 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    /* Style the submit button */
  .login-form button {
        width: 100%;
        padding: 0.75rem;
        background-color: #0f0f0f;
        color: #ffffff;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-top: 1rem;
    }

    .login-form button:disabled {
        background-color: #ffffff;
    }

    .login-form button:hover:not(:disabled) {
        background-color: rgb(36, 90, 238);
        transition: background-color 0.3s ease;
    }

    .login-form header {
        font-size: 1.5rem;
        margin-bottom: 1rem;
    }

    .login-form label {
        font-size: 25px;
        margin-bottom: 0rem;
    }

    .title-form {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        width: 100%;
        max-width: 400px;
        margin: auto;
        background-color: #def2f9;
    }
</style>