---
import { app } from "../firebase/server";
import Layout from "../layouts/Layout.astro";
import { getFirestore } from "firebase-admin/firestore";
import RecipeCard from '../components/RecipeCard.jsx';
import { getAuth } from "firebase-admin/auth";

const auth = getAuth(app);

interface Recipe {
  id: string;
  name: string;
  game: string;
  description: string;
  ingredients: string;
  steps: string
  imageURL: string;
}

/* Check current session + display recipes */

const db = getFirestore(app);
const recipesRef = db.collection("recipes");
const recipesSnapshot = await recipesRef.get();
const recipes = recipesSnapshot.docs.map((doc) => ({
  id: doc.id,
  ...doc.data(),
})) as Recipe[];

let user = null;

// Default query
let query = '';
let searchRecipes: Recipe[] = [];

// Fetch recipes based on search query from Firestore
if (query.length > 2) { // Make sure the query is at least 3 characters long
  const snapshot = await recipesRef
    .where("name", ">=", query)   // Query for recipes with a name greater than or equal to the query
    .where("name", "<=", query + '\uf8ff') // Firebase supports range queries with a special unicode for "ends with"
    .get();

  searchRecipes = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as Recipe[];
} else {
  // Fetch all recipes if no search query is entered
  const recipesSnapshot = await recipesRef.get();
  searchRecipes = recipesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })) as Recipe[];
}

const sessionCookie = Astro.cookies.get('__session')?.value;
console.log('Session Cookie:', sessionCookie); // Log the cookie to check its value

if (sessionCookie) {
  const decodedCookie = await auth.verifySessionCookie(sessionCookie);
  console.log('Decoded Cookie:', decodedCookie); // Log the decoded cookie to ensure it's valid

  user = await auth.getUser(decodedCookie.uid);
  console.log('User:', user); // Log the user object to verify it has the displayName
  console.log('hello')
}

---

<Layout title="dashboard">
  <div class="container">
    <nav id="sidebar" class="sidebar">
      <h1>Game Bytes</h1>
      <ul>
        <li><a href={`/dashboard`}>Dashboard</a></li>
        <li><a href={`/create`}>Create a Recipe (AI)</a></li>
        <li><a href={`/add-recipe`}>Add Your Recipe</a></li>
        <!-- <li><a href={`/add-remix`}>Add a Remixed Recipe</a></li> -->
      </ul>
      <form action="/api/auth/signout">
        <button class="sign-out" type="submit">Sign out</button>
      </form>
    </nav>
    <div class="content">
      <div class="top-bar">
        <h2>Brrr, it's chilly these days {user?.displayName || "Chef"} :)</h2>
      </div>
      <div class="container">
        <form>
          <input
            type="text"
            id="search-bar"
            placeholder="Search Recipes..."
            class="search-bar"
            value={query}
          />
        </form>
        <button class="category" type="submit">All Recipes</button>
        <button class="category" type="submit">Remixed Recipes</button>
        <button class="category" type="submit">Not Remixed Recipes</button>
        <button class="category" type="submit">Most Liked Recipes</button>
      </div>
      <h3>Recipe Inspiration</h3>
      <div class="product-grid">
      {recipes.map((recipe) => (
        <div>
          <RecipeCard 
            title={recipe.name} 
            game={recipe.game} 
            image={recipe.imageURL} 
          />
        </div>
        ))}
      </div>

    </div>
  </div>
</Layout>

<style>
  /* entire page container */
  .container {
    display: flex;
  }

  /* container for grid items, header, top-bar */
  .content {
    padding: 10px;
    margin-left: 20px;
    width: 100%;
  }

  .grid-container {
    display: block;
    width:100%;
  }

  .product-grid {
    display: grid; /* Enables grid layout */
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); /* Responsive columns */
    gap: 16px; /* Spacing between items */
    padding: 16px; /* Padding around the grid */
    width: 100%; /* Full width */
  }

  .top-bar {
    display: flex;              /* Use flexbox for the layout */
    justify-content: space-between; /* Space out the items */
    align-items: center;        /* Vertically align the items in the center */
    
  }

  .search-bar {
    background-color: rgb(255, 255, 255); /* Red background */
    color: rgb(0, 0, 0); /* White text color */
    border: none; /* Remove the default border */
    padding: 10px 15px; /* Adjust padding for size */
    border-radius: 25px; /* Round the corners */
    font-size: 16px; /* Adjust font size */
    width: 300px; /* Set width (adjust as needed) */
    outline: none; /* Remove the focus outline */
    transition: background-color 0.3s ease; /* Smooth transition for color change */
}

  .sign-out {
    background-color: red; /* Red background */
    color: white; /* White text color */
    border: none; /* Remove the default border */
    padding: 10px 20px; /* Adjust padding for size */
    border-radius: 25px; /* Round the corners */
    font-size: 16px; /* Adjust font size */
    cursor: pointer; /* Show pointer on hover */
    transition: background-color 0.3s ease; /* Smooth transition for color change */
}

  .sign-out:hover {
      background-color: darkred; /* Change background color on hover */
  }

  .category {
    background-color: rgb(129, 90, 211);
    color: white; /* White text color */
    border: none; /* Remove the default border */
    padding: 10px 20px; /* Adjust padding for size */
    margin-left: 10px;
    border-radius: 25px; /* Round the corners */
    font-size: 16px; /* Adjust font size */
    cursor: pointer; /* Show pointer on hover */
    transition: background-color 0.3s ease; /* Smooth transition for color change */
}

  .category:hover {
      background-color: rgb(79, 50, 142); /* Change background color on hover */
  }

  /* header format */
  h1 {
    font-family: 'Pixelify Sans', sans-serif;
    font-size: 35px;
    font-weight: 800;
    color: #e4e4e4;
  }

  h2 {
    font-size: 35px;
  }
  h3 {
    font-size: 25px;
  }

  /*background color & format */
  body {
      font-family: 'Nunito';
      margin: 0;
      padding: 0;
      background: linear-gradient(45deg, #ffa9a9, #fffeb1);
  }

  /* sidebar components */
  .sidebar {
  width: 200px;
  background-color: #594e47;
  padding: 20px;
  }

  .sidebar ul {
    list-style-type: none;
    padding: 0;
  }

  .sidebar ul li {
    margin: 15px 0;
  }

  .sidebar ul li a {
    text-decoration: none;
    color: #e4e4e4;
    border-radius: 5px;
  }

  .sidebar ul li:hover {
    background-color: beige;
    border-radius: 15px;
    color: #3e372e;
  }

  .sidebar ul li a:hover {
    color: #3e372e;
  }
</style>
