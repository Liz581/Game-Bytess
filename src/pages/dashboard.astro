---
import { app } from "../firebase/server";
import Layout from "../layouts/Layout.astro";
import { getFirestore } from "firebase-admin/firestore";
import RecipeCard from '../components/RecipeCard.jsx';
import { getAuth } from "firebase-admin/auth";

const auth = getAuth(app);

interface Recipe {
  id: string;
  name: string;
  game: string;
  description: string;
  ingredients: string;
  steps: string
  imageURL: string;
}

/* Check current session + display recipes */

const db = getFirestore(app);
const recipesRef = db.collection("recipes");
const recipesSnapshot = await recipesRef.get();
const recipes = recipesSnapshot.docs.map((doc) => ({
  id: doc.id,
  ...doc.data(),
})) as Recipe[];

let user = null;

const sessionCookie = Astro.cookies.get('session')?.value;
console.log('Session Cookie:', sessionCookie); // Log the cookie to check its value

if (sessionCookie) {
  const decodedCookie = await auth.verifySessionCookie(sessionCookie);
  console.log('Decoded Cookie:', decodedCookie); // Log the decoded cookie to ensure it's valid

  user = await auth.getUser(decodedCookie.uid);
  console.log('User:', user); // Log the user object to verify it has the displayName
  console.log('hello')
}

// // TODO Retrieve the session cookie and verify it
// // Use Firebase verifySessionCookie method to verify the session cookie

// if (sessionCookie) {
//     const decodedCookie = await auth.verifySessionCookie(sessionCookie)

//     // Get the user details from the decoded cookie
//     const user = await auth.getUser(decodedCookie.uid)

//     // TODO If the user is not found, redirect the user to the signin page
//     if (!user) return Astro.redirect('/signin')
// }
---

<Layout title="dashboard">
  <div class="container">
    <nav class="sidebar">
      <h1>Game Bytes</h1>
      <ul>
        <li><a href="/dashboard">Dashboard</a></li>
        <li><a href="/page1">Page 1</a></li>
        <li><a href="/page2">Page 2</a></li>
      </ul>
      <form action="/api/auth/signout">
        <button type="submit">Sign out</button>
      </form>
    </nav>
    <div class="content">
      <div class="top-bar">
        <h2>Brrr, it's chilly these days. Right, {user?.displayName || "Chef"} ?? </h2>
        <a href={`/add`}>Add New Recipe</a>
      </div>
      <!-- commented out as a reccomendation from chatgpt, tackles issue where cards upload in column format -->
      <!-- <h4>Recipes</h4>
      <div class="product-grid"></div>
        {recipes.map((recipe) => (
            // <li>
            //   <a href={`/recipe/${recipe.id}`}>{recipe.name}</a>
            //   <span>({recipe.game})</span>
            //   <a href={`/edit/${recipe.id}`}>Edit</a>
            // </li>
            <div>
              <RecipeCard title={recipe.name} game={recipe.game} image={recipe.imageURL} />
            </div>
          ))
        }
      </div> -->
      <h4>Recipes</h4>
      <div class="product-grid">
      {recipes.map((recipe) => (
        <div>
          <RecipeCard 
            title={recipe.name} 
            game={recipe.game} 
            image={recipe.imageURL} 
          />
        </div>
        ))}
      </div>

    </div>
  </div>
</Layout>

<style>
  /* entire page container */
  .container {
    display: flex;
  }

  /* container for grid items, header, top-bar */
  .content {
    padding: 10px;
    margin-left: 20px;
    width: 100%;
    height: 100vh;
  }

  .grid-container {
    display: block;
    width:100%;
  }

  .product-grid {
    display: grid; /* Enables grid layout */
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); /* Responsive columns */
    gap: 16px; /* Spacing between items */
    padding: 16px; /* Padding around the grid */
    width: 100%; /* Full width */
  }

  .top-bar {
    display: flex;              /* Use flexbox for the layout */
    justify-content: space-between; /* Space out the items */
    align-items: center;        /* Vertically align the items in the center */
    padding: 10px;              /* Add some padding for spacing */
  }


  /* header format */
  h1 {
    font-size: 30px;
    font-style: italic;
    font-weight: 800;
  }

  /*background color & format */
  body {
      font-family: 'Nunito';
      margin: 0;
      padding: 0;
      background: linear-gradient(45deg, #ffbcff, #fffeb1);
  }

  /* sidebar components */
  .sidebar {
  width: 200px;
  background-color: #f4f4f4;
  padding: 20px;
  }

  .sidebar ul {
    list-style-type: none;
    padding: 0;
  }

  .sidebar ul li {
    margin: 15px 0;
  }

  .sidebar ul li a {
    text-decoration: none;
    color: #333;
  }

  .sidebar ul li a:hover {
    color: #007bff;
  }
</style>
